Многие для планирования своего дня записывают список дел в заметках телефона, но в магазине приложений появилось новое приложение для планирования, которое позволяет не только создавать заметки, но и выполнять с ними различные действия.

Большинство пользователей имеет привычку создавать заметки не только на текущий и завтрашний день, но и на несколько месяцев вперед. Тебе необходимо помочь пользователю произвести миграцию старых данных в новый формат, поддерживаемый новым приложением.

Устаревший формат хранения данных организован очень просто - каждая заметка представляет собой текстовый файл, в котором построчно хранится информация о делах и задачах пользователей.

Актуальный формат данных нового приложения предполагает организацию хранения с помощью списков.

При осуществлении миграции необходимо предусмотреть неординарные сценарии работы приложения и обеспечить его устойчивую работу при возникновении программных отказов.

В случае, если указан ошибочный путь и файл по указанному пути отсутствует, в консоль необходимо вывести сообщение: “File not found”.
Независимо от результата миграции требуется вывести сообщение в консоль: “Process finished”.
При успешном открытии файла, файл в любом случае потребуется корректно закрыть, даже если в процессе миграции произойдут непредвиденные ошибки
Также необходимо предусмотреть возможность добавлять комментарии с помощью консоли в файл заметок. При отказе в доступе для записи в файл программа должна корректно завершаться и информировать пользователя о невозможности записи в файл с помощью сообщения “Access denied”.
Тебе необходимо реализовать атомарный шаг миграции,т.е. импорт одной заметки в список.

Часть процесса импорта описывается публичным статическим классом ImportNotesFromFileToList.

Класс содержит публичные статические методы:

readNotesToList() - на вход ожидает путь к текстовому файлу с именем “Notes.txt”, разбивает его на заметки построчно, на выходе формирует список заметок. Не создает пустых заметок из пустых строк.
writeCommentToNotes() - на входе ожидает путь к текстовому файлу с именем “Notes.txt”, считывает введенное с помощью консоли сообщение и добавляет его в конец файла в виде #<введенная строка>.
Для успешного прохождения задания тебе необходимо реализовать класс ImportNotesFromFileToList и его методы readNotesToList() и writeCommentToNotes() и предусмотреть обработку исключительных ситуаций, описанных выше.